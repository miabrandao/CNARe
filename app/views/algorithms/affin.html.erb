<head>

<style>

div.tooltip {   
  position: absolute;           
  text-align: center;           
  width: auto;                  
  height: auto;                 
  padding: 2px;             
  font: 12px sans-serif;        
  background: lightsteelblue;   
  border: 0px;      
  border-radius: 8px;           
  pointer-events: none;         
}

#update_button {
  width: 7.7em;  height: 2em;
  right: -400px;
  top: 50px;
  position: relative;
}

#form_update {
  height: 0px;
}

#form_filter {
  height: 0px;
}

#table_filter {
  top: 45px;
  position: relative;
}

.alert-danger,
.alert-error {
color: #b94a48;
background-color: #f2dede;
border-color: #eed3d7;
}

table#table_width {
  width: 300px; 
  position: relative;
  right: -50px;
  float: left;
}

#label {
  right: -50px;
  top: -10px;
  position: relative;
  border: solid 1px #ccc;
  border-radius: 5px;
  float: left;
}

table#table_filter {
  float: left;
  width: 330px; 
  top: 35px;
}

svg {
    background-color: white; 
    float:left;
    border: solid 1px #ccc;
    border-radius: 5px;
}

.node circle {
    stroke: #fff;
    stroke-width: 1.5px; 
}
.node text {
    font: bold 12px sans-serif;
    fill: darkblue;
    text-shadow: 0 1px 0 #000000;
}
.link {
    stroke: #999;
    stroke-opacity: .6;
}
.reclink {
    stroke-dasharray: 3,3;
    stroke-opacity: .6;
}

#dl_link 
{
      top: 730px;
      left: 440px;
      position: relative;
      border: solid 1px #CCC;
      border-radius: 5px;
      background-color: #0058CC;
      padding: 6px;
      color: #FFF;
      font-family: sans-serif;
      font-size: 12px;
      text-decoration: none;
}
    
#dl_link:hover 
{
      background-color: #004CCC;
}

</style></head>
 
<table id="table_filter">
  <td width="350">
    <%= form_tag({:action => 'create_affin'}, {:id => 'form_filter'}) do %>
      <table class="table">
        <thead>
          <tr>
            <th width="75">
              <label class="radio inline">
                <input type="radio" id="filter_all" name="filter_affin" value="false" onclick="submit()" checked  /> Show all<br>
              </label>
            </th>
            <% if @filter == "true"%>
              <th>
                <label class="radio inline">
                  <input type="radio" id="filter_year_amount" name="filter_affin" value="true" onclick="document.getElementById('year_amount').style.display='block';" checked/> Filter<br>
                </label>
              </th>
            <% else %>
              <th>
                <label class="radio inline">
                  <input type="radio" id="filter_year_amount" name="filter_affin" value="true" onclick="document.getElementById('year_amount').style.display='block';"/> Filter<br>
                </label>
              </th>
            <% end %>             
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>

            </td>
            <td>
              <% if @filter == "true" %>
                <div id="year_amount" style="display: none">
                  <%= select_tag 'year_affin', options_for_select([['Last 2 years', 'last_year_pub_target >= 2013'], ['Last 5 years', 'last_year_pub_target >= 2010'], ['Last 10 years', 'last_year_pub_target >= 2005']], :selected=>@year), prompt: "Select a period" %>
                  <%= select_tag 'amount_affin', options_for_select([['2 to 5 publications', 'count_pub_target between 2 and 5'], ['6 to 10 publications', 'count_pub_target between 6 and 10'], ['More than 10 publications', 'count_pub_target > 10']], :selected=>@amount), prompt: "Select a minimum quantity" %>
                  <%= select_tag 'institution_affin', options_for_select(@instituicoes.collect{ |u| [u.instituicao, 'instituicao = '+'\''+u.instituicao+'\''] }, :selected=>@institution), prompt: "Select a institution" %>
                  <%= select_tag 'formation_period_affin', options_for_select([['Last 10 years', 'YEAR(formacao_academica.data_fim)) >= 2005'], ['Last 20 years', 'YEAR(formacao_academica.data_fim)) >= 1995'], ['More than 20 years ago', 'YEAR(formacao_academica.data_fim)) <= 1994']], :selected=>@formation_period), prompt: "Select a period of formation" %>
                  <%= submit_tag "filter" %>
                 </div>
               <% else %>
                 <div id="year_amount" style="display: none">
                   <%= select_tag 'year_affin', options_for_select([['Last 2 years', 'last_year_pub_target >= 2013'], ['Last 5 years', 'last_year_pub_target >= 2010'], ['Last 10 years', 'last_year_pub_target >= 2005']], :selected=>@year), prompt: "Select a period" %>
                   <%= select_tag 'amount_affin', options_for_select([['2 to 5 publications', 'count_pub_target between 2 and 5'], ['6 to 10 publications', 'count_pub_target between 6 and 10'], ['More than 10 publications', 'count_pub_target > 10']], :selected=>@amount), prompt: "Select a minimum quantity" %>
                   <%= select_tag 'institution_affin', options_for_select(@instituicoes.collect{ |u| [u.instituicao, 'instituicao = '+'\''+u.instituicao+'\''] }, :selected=>@institution), prompt: "Select a institution" %>
                   <%= select_tag 'formation_period_affin', options_for_select([['Last 10 years', 'YEAR(formacao_academica.data_fim)) >= 2005'], ['Last 20 years', 'YEAR(formacao_academica.data_fim)) >= 1995'], ['More than 20 years ago', 'YEAR(formacao_academica.data_fim)) <= 1994']], :selected=>@formation_period), prompt: "Select a period of formation" %>
                   <%= submit_tag "filter" %>
                 </div>
               <% end %>
             </td>
           </tr>
         </tbody>
       </table>  
     <% end %>
   </td> 
</table> 

<%= form_tag({:action => 'update_network'}, {:id => 'form_update'}) do %>
  <input id="update_button" name="affin_update" type="submit" value="Update" class="btn-primary">
<% end %>
       
<a id="dl_link" href="#" download="canvas.png">Download</a>

<div id="graph_a" style="display:none"></div>

<div id="graph_d"></div>

<script id = "graph_s">

var div = d3.select("body").append("div")   
    .attr("class", "tooltip")               
    .style("opacity", 0);

var multiplier = 2;

var color = d3.scale.category10();

var width = 850,
    height = 750

var svg = d3.select("div#graph_d").append("svg")
    .attr("width", width)
    .attr("height", height);

var force = d3.layout.force()
    .gravity(.05)
    .linkDistance(175)
    .charge(-700)
    .size([width, height]);

d3.json("http://localhost:3000/top_affin.json", function(error, json) {
  var node_drag = d3.behavior.drag()
    .on("dragstart", dragstart)
    .on("drag", dragmove)
    .on("dragend", dragend);  

  var edges = [];
    json.Links.forEach(function(e) { 
    var sourceNode = json.Nodes.filter(function(n) { return n.id === e.source; })[0],
    targetNode = json.Nodes.filter(function(n) { return n.id === e.target; })[0];
    	
    edges.push({source: sourceNode, target: targetNode, value: e.value, count: e.count});
    });

  var recedges = [];
    json.RecommendedLink.forEach(function(e) { 
    var sourceNode = json.Nodes.filter(function(n) { return n.id === e.source; })[0],
    targetNode = json.Nodes.filter(function(n) { return n.id === e.target; })[0];
    	
    recedges.push({source: sourceNode, target: targetNode, value: e.value, classificacao: e.classificacao});
    });
    
function dragstart(d, i) {
    force.stop() // stops the force auto positioning before you start dragging
}

function dragmove(d, i) {
    d.px += d3.event.dx;
    d.py += d3.event.dy;
    d.x += d3.event.dx;
    d.y += d3.event.dy; 
    tick(); // this is the key to make it work together with updating both px,py,x,y on d !
}

function dragend(d, i) {
    d.fixed = true; // of course set the node to fixed so the force doesn't include the node in its auto positioning stuff
    tick();
    force.resume();
}

  force
      .nodes(json.Nodes)
      .links(edges)
      .start();

  var link = svg.selectAll(".link")
      .data(edges)
    .enter().append("line")
      .attr("class", "link")
      .style("stroke-width", function(e) { return e.value*multiplier})
      .on("mouseover", function(e) {      
          div.transition()        
             .duration(200)      
             .style("opacity", .9);      
          div .html("Number of publications: "  + e.count)  
              .style("left", (d3.event.pageX) + "px")     
              .style("top", (d3.event.pageY - 28) + "px");    
          })                  
      .on("mouseout", function(e) {       
          div.transition()        
              .duration(500)      
              .style("opacity", 0);   
      });

  var reclink = svg.selectAll(".reclink")
      .data(recedges)
    .enter().append("line")
      .attr("class", "reclink")
      .style("stroke", function(e) {
          if (e.classificacao >= 0.66 && e.classificacao < 0.69) {return "#86a481"}
          else if (e.classificacao >= 0.69 && e.classificacao < 0.72) {return "#6d9167"}
          else if (e.classificacao >= 0.72 && e.classificacao < 0.75) {return "#557f4e"}
          else if(e.classificacao >= 0.75 && e.classificacao < 0.78) {return "#3d6d35"}
          else if (e.classificacao >= 0.78 && e.classificacao < 0.81) {return "#255b1c"}
          else if (e.classificacao >= 0.81 && e.classificacao < 0.84) {return "#0d4903"}
          else if(e.classificacao >= 0.84 && e.classificacao < 0.87) {return "#0b4102"}
          else if (e.classificacao >= 0.87 && e.classificacao < 0.90) {return "#0a3a02"}
          else if (e.classificacao >= 0.90 && e.classificacao < 0.93) {return "#093302"}
          else if(e.classificacao >= 0.93 && e.classificacao < 0.96) {return "#072b01"}
          else if(e.classificacao >= 0.96 && e.classificacao <= 1) {return "#062401"}
      })
      .style("stroke-width", function(e) { 
          if (e.classificacao >= 0.66 && e.classificacao < 0.69) {return e.value * 1}
          else if (e.classificacao >= 0.69 && e.classificacao < 0.72) {return e.value * 2}
          else if (e.classificacao >= 0.72 && e.classificacao < 0.75) {return e.value * 3}
          else if(e.classificacao >= 0.75 && e.classificacao < 0.78) {return e.value * 4}
          else if (e.classificacao >= 0.78 && e.classificacao < 0.81) {return e.value * 5}
          else if (e.classificacao >= 0.81 && e.classificacao < 0.84) {return e.value * 6}
          else if(e.classificacao >= 0.84 && e.classificacao < 0.87) {return e.value * 7}
          else if (e.classificacao >= 0.87 && e.classificacao < 0.90) {return e.value * 8}
          else if (e.classificacao >= 0.90 && e.classificacao < 0.93) {return e.value * 9}
          else if(e.classificacao >= 0.93 && e.classificacao < 0.96) {return e.value * 10}
          else if(e.classificacao >= 0.96 && e.classificacao <= 1) {return e.value * 11}
      })
      .on("mouseover", function(e) {      
          div.transition()        
             .duration(200)      
             .style("opacity", .9);      
          div .html("Recommendation score: "  + e.classificacao)  
              .style("left", (d3.event.pageX) + "px")     
              .style("top", (d3.event.pageY - 28) + "px");    
          })                  
      .on("mouseout", function(e) {       
          div.transition()        
              .duration(500)      
              .style("opacity", 0);   
      });

  var node = svg.selectAll(".node")
      .data(json.Nodes)
    .enter().append("g")
      .attr("class", "node")
      .style("fill", function(d) { return color(d.group); })
      .call(node_drag)
      .on("mouseover", function(d) {      
          div.transition()        
             .duration(200)      
             .style("opacity", .9);      
          div .html("Institution: "  + d.instituicao)  
              .style("left", (d3.event.pageX) + "px")     
              .style("top", (d3.event.pageY - 28) + "px");    
          })                  
      .on("mouseout", function(d) {       
          div.transition()        
              .duration(500)      
              .style("opacity", 0);   
      });

  node.append("circle")
      .attr("class", "node")
      .attr("r", 10);

  node.append("text")
      .attr("dx", 12)
      .attr("dy", ".35em")
      .text(function(d) { return d.name})
  
   force.on("tick", tick);

   function tick() {
      node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
      link.attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });
      reclink.attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });
    };
});
</script>

<%= form_tag(:action => "create_affin", :method => "get") do %>

<% if @researchers %>
  <% if @affins.size >= 5 %>
    <table class="table table-striped table-bordered" id = "table_width" "table border="0" cellpadding="0" cellspacing="0">
      <thead>
        <td><b><center>Affin</center></b></td>
      </thead>
      <tbody>	
       <% for index in (0 ... 5).step(1)  %>				
        <tr>
          <td>
            <%= @affins[index].pesquisador2.nome %><br>
            Institution: <%= @affins[index].pesquisador2.instituicao %><br>
            <a href="#" rel="tooltip" onclick="return false" title="<%= @affins[index].pesquisador2.area %>">Research area</a><br>  
            Neighborhood overlap: <% if @affins[index].neighborhood < 1 %> <%= @affins[index].neighborhood.round(2) %> <% end %><br>
          </td>
          <td>
             <% if @target == @affins[index].pesquisador2_id %>
               <label class="radio">
                 <input type="radio" id="researcher_target" name="affin_target" checked="checked" value="<%= @affins[index].pesquisador2_id %>" onclick="submit();" />
               </label>
             <% else %>
               <label class="radio">
                 <input type="radio" id="researcher_target" name="affin_target" value="<%= @affins[index].pesquisador2_id %>" onclick="submit();" />
               </label>
             <% end %>
          </td>
         </tr>
        <% end %>
      </tbody>
    </table>
    <%= image_tag("label2.png", :id => "label") %>
  <% end %>
<% end %>

<% end %>
